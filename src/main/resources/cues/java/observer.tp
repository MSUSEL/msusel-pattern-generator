start_pattern: basic
start_type: ConcreteObserver
/**
[[ClassComment]]
 */
[[typedef]] {

    [[fields]]

    start_method: Update
    public void [[name]]() {
        [[observerState.name]] = [[sub.name]].[[ConcreteSubject.GetState.name]]();
    }
    end_method: Update
    [[methods]]
}
end_type: ConcreteObserver

start_type: Subject
import java.util.*;

/**
[[ClassComment]]
 */
[[typedef]] {

    start_field: obs
    protected List<[[Observer.name]]> [[obs.name]] = new ArrayList<>();
    end_field: obs
    [[fields]]

    start_method: Attach
    public void [[name]]([[params]]) {
        if ([[param.obsv]] != null)
            [[obs.name]].add([[param.obsv]]);
    }
    end_method: Attach

    start_method: Detach
    public void [[name]]([[params]]) {
        if ([[param.obsv]] != null)
            [[obs.name]].remove([[param.obsv]]);
    }
    end_method: Detach

    start_method: Notify
    public void [[name]]() {
        for ([[Observer.name]] item : [[obs.name]])
            item.[[Observer.Update.name]]();
    }
    end_method: Notify
    [[methods]]
}
end_type: Subject

end_pattern: basic
